//
//  StyleKitName.m
//  ProjectName
//
//  Created by Andres Ruggiero on 4/17/15.
//  Copyright (c) 2015 CompanyName. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "StyleKitName.h"


@implementation StyleKitName

#pragma mark Cache

static UIColor* _baseColor = nil;
static UIColor* _stringColor = nil;
static UIColor* _redBaseColor = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _baseColor = [UIColor colorWithRed: 0.93 green: 0.653 blue: 0.384 alpha: 1];
    _stringColor = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    _redBaseColor = [UIColor colorWithRed: 0.949 green: 0.388 blue: 0.337 alpha: 1];

}

#pragma mark Colors

+ (UIColor*)baseColor { return _baseColor; }
+ (UIColor*)stringColor { return _stringColor; }
+ (UIColor*)redBaseColor { return _redBaseColor; }

#pragma mark Drawing Methods

+ (void)drawContentCellWithFrame: (CGRect)frame baseCurrencyName: (NSString*)baseCurrencyName baseCurrency: (NSString*)baseCurrency exchangeRate: (NSString*)exchangeRate isPressed: (BOOL)isPressed
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* labelStringColor = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.609];
    UIColor* exchangeRateColor = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* exchangeRateStringColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];
    UIColor* pressedColor = [StyleKitName.redBaseColor colorWithAlphaComponent: 0.4];
    UIColor* color2 = [UIColor colorWithRed: 0.237 green: 0.233 blue: 0.233 alpha: 1];

    //// Variable Declarations
    NSString* label = @"Currency:";

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.00000 + 0.5), CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.00000 + 0.5), floor(CGRectGetWidth(frame) * 1.00000 + 0.5) - floor(CGRectGetWidth(frame) * 0.00000 + 0.5), floor(CGRectGetHeight(frame) * 1.00000 + 0.5) - floor(CGRectGetHeight(frame) * 0.00000 + 0.5))];
    [StyleKitName.redBaseColor setFill];
    [rectanglePath fill];


    //// Currency Name Label Drawing
    CGRect currencyNameLabelRect = CGRectMake(CGRectGetMinX(frame) + floor((CGRectGetWidth(frame) - 52) * 0.04023 + 0.5), CGRectGetMinY(frame) + floor((CGRectGetHeight(frame) - 17) * 0.22034 + 0.5), 52, 17);
    UIBezierPath* currencyNameLabelPath = [UIBezierPath bezierPathWithRect: currencyNameLabelRect];
    [StyleKitName.redBaseColor setFill];
    [currencyNameLabelPath fill];
    NSMutableParagraphStyle* currencyNameLabelStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    currencyNameLabelStyle.alignment = NSTextAlignmentCenter;

    NSDictionary* currencyNameLabelFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"Helvetica" size: 10], NSForegroundColorAttributeName: labelStringColor, NSParagraphStyleAttributeName: currencyNameLabelStyle};

    CGFloat currencyNameLabelTextHeight = [label boundingRectWithSize: CGSizeMake(currencyNameLabelRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: currencyNameLabelFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, currencyNameLabelRect);
    [label drawInRect: CGRectMake(CGRectGetMinX(currencyNameLabelRect), CGRectGetMinY(currencyNameLabelRect) + (CGRectGetHeight(currencyNameLabelRect) - currencyNameLabelTextHeight) / 2, CGRectGetWidth(currencyNameLabelRect), currencyNameLabelTextHeight) withAttributes: currencyNameLabelFontAttributes];
    CGContextRestoreGState(context);


    //// Base Currency Name Input Drawing
    CGRect baseCurrencyNameInputRect = CGRectMake(CGRectGetMinX(frame) + floor((CGRectGetWidth(frame) - 98) * 0.24172 + 0.5), CGRectGetMinY(frame) + floor((CGRectGetHeight(frame) - 32) * 0.11364 + 0.5), 98, 32);
    UIBezierPath* baseCurrencyNameInputPath = [UIBezierPath bezierPathWithRect: baseCurrencyNameInputRect];
    [StyleKitName.redBaseColor setFill];
    [baseCurrencyNameInputPath fill];
    NSMutableParagraphStyle* baseCurrencyNameInputStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    baseCurrencyNameInputStyle.alignment = NSTextAlignmentLeft;

    NSDictionary* baseCurrencyNameInputFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"Helvetica" size: 12], NSForegroundColorAttributeName: StyleKitName.stringColor, NSParagraphStyleAttributeName: baseCurrencyNameInputStyle};

    CGFloat baseCurrencyNameInputTextHeight = [baseCurrencyName boundingRectWithSize: CGSizeMake(baseCurrencyNameInputRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: baseCurrencyNameInputFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, baseCurrencyNameInputRect);
    [baseCurrencyName drawInRect: CGRectMake(CGRectGetMinX(baseCurrencyNameInputRect), CGRectGetMinY(baseCurrencyNameInputRect) + (CGRectGetHeight(baseCurrencyNameInputRect) - baseCurrencyNameInputTextHeight) / 2, CGRectGetWidth(baseCurrencyNameInputRect), baseCurrencyNameInputTextHeight) withAttributes: baseCurrencyNameInputFontAttributes];
    CGContextRestoreGState(context);


    //// Currency Label Drawing
    CGRect currencyLabelRect = CGRectMake(CGRectGetMinX(frame) + floor((CGRectGetWidth(frame) - 37) * 0.03857 + 0.5), CGRectGetMinY(frame) + floor((CGRectGetHeight(frame) - 13) * 0.57143 + 0.5), 37, 13);
    UIBezierPath* currencyLabelPath = [UIBezierPath bezierPathWithRect: currencyLabelRect];
    [StyleKitName.redBaseColor setFill];
    [currencyLabelPath fill];
    {
        NSString* textContent = @"Initials:";
        NSMutableParagraphStyle* currencyLabelStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        currencyLabelStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* currencyLabelFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"Helvetica" size: 8], NSForegroundColorAttributeName: labelStringColor, NSParagraphStyleAttributeName: currencyLabelStyle};

        CGFloat currencyLabelTextHeight = [textContent boundingRectWithSize: CGSizeMake(currencyLabelRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: currencyLabelFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, currencyLabelRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(currencyLabelRect), CGRectGetMinY(currencyLabelRect) + (CGRectGetHeight(currencyLabelRect) - currencyLabelTextHeight) / 2, CGRectGetWidth(currencyLabelRect), currencyLabelTextHeight) withAttributes: currencyLabelFontAttributes];
        CGContextRestoreGState(context);
    }


    //// Base Currency Input Drawing
    CGRect baseCurrencyInputRect = CGRectMake(CGRectGetMinX(frame) + floor((CGRectGetWidth(frame) - 44) * 0.18539 + 0.5), CGRectGetMinY(frame) + floor((CGRectGetHeight(frame) - 12) * 0.56250 + 0.5), 44, 12);
    UIBezierPath* baseCurrencyInputPath = [UIBezierPath bezierPathWithRect: baseCurrencyInputRect];
    [StyleKitName.redBaseColor setFill];
    [baseCurrencyInputPath fill];
    NSMutableParagraphStyle* baseCurrencyInputStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    baseCurrencyInputStyle.alignment = NSTextAlignmentLeft;

    NSDictionary* baseCurrencyInputFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"Helvetica" size: 8], NSForegroundColorAttributeName: StyleKitName.stringColor, NSParagraphStyleAttributeName: baseCurrencyInputStyle};

    CGFloat baseCurrencyInputTextHeight = [baseCurrency boundingRectWithSize: CGSizeMake(baseCurrencyInputRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: baseCurrencyInputFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, baseCurrencyInputRect);
    [baseCurrency drawInRect: CGRectMake(CGRectGetMinX(baseCurrencyInputRect), CGRectGetMinY(baseCurrencyInputRect) + (CGRectGetHeight(baseCurrencyInputRect) - baseCurrencyInputTextHeight) / 2, CGRectGetWidth(baseCurrencyInputRect), baseCurrencyInputTextHeight) withAttributes: baseCurrencyInputFontAttributes];
    CGContextRestoreGState(context);


    //// Exchange Rate Input Drawing
    CGRect exchangeRateInputRect = CGRectMake(CGRectGetMinX(frame) + floor((CGRectGetWidth(frame) - 67) * 0.75976 + 0.5), CGRectGetMinY(frame) + floor((CGRectGetHeight(frame) - 14) * 0.22581 + 0.5), 67, 14);
    UIBezierPath* exchangeRateInputPath = [UIBezierPath bezierPathWithRoundedRect: exchangeRateInputRect cornerRadius: 7];
    [exchangeRateColor setFill];
    [exchangeRateInputPath fill];
    NSMutableParagraphStyle* exchangeRateInputStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    exchangeRateInputStyle.alignment = NSTextAlignmentCenter;

    NSDictionary* exchangeRateInputFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"Helvetica" size: 8], NSForegroundColorAttributeName: exchangeRateStringColor, NSParagraphStyleAttributeName: exchangeRateInputStyle};

    CGFloat exchangeRateInputTextHeight = [exchangeRate boundingRectWithSize: CGSizeMake(exchangeRateInputRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: exchangeRateInputFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, exchangeRateInputRect);
    [exchangeRate drawInRect: CGRectMake(CGRectGetMinX(exchangeRateInputRect), CGRectGetMinY(exchangeRateInputRect) + (CGRectGetHeight(exchangeRateInputRect) - exchangeRateInputTextHeight) / 2, CGRectGetWidth(exchangeRateInputRect), exchangeRateInputTextHeight) withAttributes: exchangeRateInputFontAttributes];
    CGContextRestoreGState(context);


    if (isPressed)
    {
        //// Rectangle 2 Drawing
        UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.00000 + 0.5), CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.00000 + 0.5), floor(CGRectGetWidth(frame) * 1.00000 + 0.5) - floor(CGRectGetWidth(frame) * 0.00000 + 0.5), floor(CGRectGetHeight(frame) * 1.00000 + 0.5) - floor(CGRectGetHeight(frame) * 0.00000 + 0.5))];
        [pressedColor setFill];
        [rectangle2Path fill];


        //// Rectangle 3 Drawing
        UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRect: CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.00000 + 0.5), CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.00000 + 0.5), floor(CGRectGetWidth(frame) * 0.01500 + 0.5) - floor(CGRectGetWidth(frame) * 0.00000 + 0.5), floor(CGRectGetHeight(frame) * 1.00000 + 0.5) - floor(CGRectGetHeight(frame) * 0.00000 + 0.5))];
        [color2 setFill];
        [rectangle3Path fill];
    }
}

+ (void)drawCategoriesCellWithFrame: (CGRect)frame withIcon: (UIImage*)withIcon andExchangeCategoryName: (NSString*)andExchangeCategoryName isPressed: (BOOL)isPressed
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* labelStrokeColor = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];
    UIColor* pressedColor = [StyleKitName.redBaseColor colorWithAlphaComponent: 0.4];
    UIColor* color2 = [UIColor colorWithRed: 0.237 green: 0.233 blue: 0.233 alpha: 1];

    //// baseRectable Drawing
    UIBezierPath* baseRectablePath = [UIBezierPath bezierPathWithRect: CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.00000 + 0.5), CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.00000 + 0.5), floor(CGRectGetWidth(frame) * 1.00000 + 0.5) - floor(CGRectGetWidth(frame) * 0.00000 + 0.5), floor(CGRectGetHeight(frame) * 1.00000 + 0.5) - floor(CGRectGetHeight(frame) * 0.00000 + 0.5))];
    [StyleKitName.redBaseColor setFill];
    [baseRectablePath fill];


    //// Icon Drawing
    CGRect iconRect = CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.07143) + 0.5, CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.07143) + 0.5, floor(CGRectGetWidth(frame) * 0.92857) - floor(CGRectGetWidth(frame) * 0.07143), floor(CGRectGetHeight(frame) * 0.74490) - floor(CGRectGetHeight(frame) * 0.07143));
    UIBezierPath* iconPath = [UIBezierPath bezierPathWithRect: iconRect];
    CGContextSaveGState(context);
    [iconPath addClip];
    [withIcon drawInRect: CGRectMake(floor(CGRectGetMinX(iconRect) + 0.5), floor(CGRectGetMinY(iconRect) + 0.5), withIcon.size.width, withIcon.size.height)];
    CGContextRestoreGState(context);
    [labelStrokeColor setStroke];
    iconPath.lineWidth = 1;
    [iconPath stroke];


    //// Category Name Input Drawing
    CGRect categoryNameInputRect = CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.07143) + 0.5, CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.80612) + 0.5, floor(CGRectGetWidth(frame) * 0.58163) - floor(CGRectGetWidth(frame) * 0.07143), floor(CGRectGetHeight(frame) * 0.94898) - floor(CGRectGetHeight(frame) * 0.80612));
    UIBezierPath* categoryNameInputPath = [UIBezierPath bezierPathWithRect: categoryNameInputRect];
    [StyleKitName.redBaseColor setFill];
    [categoryNameInputPath fill];
    [labelStrokeColor setStroke];
    categoryNameInputPath.lineWidth = 1;
    [categoryNameInputPath stroke];
    NSMutableParagraphStyle* categoryNameInputStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    categoryNameInputStyle.alignment = NSTextAlignmentCenter;

    NSDictionary* categoryNameInputFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"Helvetica" size: 4], NSForegroundColorAttributeName: UIColor.whiteColor, NSParagraphStyleAttributeName: categoryNameInputStyle};

    CGFloat categoryNameInputTextHeight = [andExchangeCategoryName boundingRectWithSize: CGSizeMake(categoryNameInputRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: categoryNameInputFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, categoryNameInputRect);
    [andExchangeCategoryName drawInRect: CGRectMake(CGRectGetMinX(categoryNameInputRect), CGRectGetMinY(categoryNameInputRect) + (CGRectGetHeight(categoryNameInputRect) - categoryNameInputTextHeight) / 2, CGRectGetWidth(categoryNameInputRect), categoryNameInputTextHeight) withAttributes: categoryNameInputFontAttributes];
    CGContextRestoreGState(context);


    if (isPressed)
    {
        //// Pressed Rectangle Drawing
        UIBezierPath* pressedRectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.00000 + 0.5), CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.00000 + 0.5), floor(CGRectGetWidth(frame) * 1.00000 + 0.5) - floor(CGRectGetWidth(frame) * 0.00000 + 0.5), floor(CGRectGetHeight(frame) * 1.00000 + 0.5) - floor(CGRectGetHeight(frame) * 0.00000 + 0.5))];
        [pressedColor setFill];
        [pressedRectanglePath fill];


        //// Rectangle Drawing
        UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.00000 + 0.5), CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.00000 + 0.5), floor(CGRectGetWidth(frame) * 0.04082 + 0.5) - floor(CGRectGetWidth(frame) * 0.00000 + 0.5), floor(CGRectGetHeight(frame) * 1.00000 + 0.5) - floor(CGRectGetHeight(frame) * 0.00000 + 0.5))];
        [color2 setFill];
        [rectanglePath fill];
    }
}

+ (void)drawCanvas1WithFrame: (CGRect)frame isPressed: (BOOL)isPressed category: (NSString*)category
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color2 = [UIColor colorWithRed: 0.237 green: 0.233 blue: 0.233 alpha: 1];
    UIColor* color3 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 1];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.00000 + 0.5), CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.00000 + 0.5), floor(CGRectGetWidth(frame) * 1.00000 + 0.5) - floor(CGRectGetWidth(frame) * 0.00000 + 0.5), floor(CGRectGetHeight(frame) * 1.00000 + 0.5) - floor(CGRectGetHeight(frame) * 0.00000 + 0.5))];
    [StyleKitName.redBaseColor setFill];
    [rectanglePath fill];


    if (isPressed)
    {
        //// PressedIndicator Drawing
        UIBezierPath* pressedIndicatorPath = [UIBezierPath bezierPathWithRect: CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.00000 + 0.5), CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.00000 + 0.5), floor(CGRectGetWidth(frame) * 0.08163 + 0.5) - floor(CGRectGetWidth(frame) * 0.00000 + 0.5), floor(CGRectGetHeight(frame) * 1.00000 + 0.5) - floor(CGRectGetHeight(frame) * 0.00000 + 0.5))];
        [color2 setFill];
        [pressedIndicatorPath fill];
    }


    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = UIBezierPath.bezierPath;
    [rectangle2Path moveToPoint: CGPointMake(CGRectGetMinX(frame) + 0.08163 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame))];
    [rectangle2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 1.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame))];
    [rectangle2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 1.00000 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.81633 * CGRectGetHeight(frame))];
    [rectangle2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.31122 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 0.81633 * CGRectGetHeight(frame))];
    [rectangle2Path addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 0.08163 * CGRectGetWidth(frame), CGRectGetMinY(frame) + 1.00000 * CGRectGetHeight(frame))];
    [rectangle2Path closePath];
    [color3 setFill];
    [rectangle2Path fill];


    //// Rectangle 3 Drawing
    CGRect rectangle3Rect = CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.38776 + 0.5), CGRectGetMinY(frame) + floor(CGRectGetHeight(frame) * 0.81633 + 0.5), floor(CGRectGetWidth(frame) * 1.00000 + 0.5) - floor(CGRectGetWidth(frame) * 0.38776 + 0.5), floor(CGRectGetHeight(frame) * 1.00000 + 0.5) - floor(CGRectGetHeight(frame) * 0.81633 + 0.5));
    UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRect: rectangle3Rect];
    [color3 setFill];
    [rectangle3Path fill];
    NSMutableParagraphStyle* rectangle3Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    rectangle3Style.alignment = NSTextAlignmentCenter;

    NSDictionary* rectangle3FontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"Helvetica" size: 5], NSForegroundColorAttributeName: StyleKitName.redBaseColor, NSParagraphStyleAttributeName: rectangle3Style};

    CGFloat rectangle3TextHeight = [category boundingRectWithSize: CGSizeMake(rectangle3Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: rectangle3FontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, rectangle3Rect);
    [category drawInRect: CGRectMake(CGRectGetMinX(rectangle3Rect), CGRectGetMinY(rectangle3Rect) + (CGRectGetHeight(rectangle3Rect) - rectangle3TextHeight) / 2, CGRectGetWidth(rectangle3Rect), rectangle3TextHeight) withAttributes: rectangle3FontAttributes];
    CGContextRestoreGState(context);
}

@end
